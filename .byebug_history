c
weather.dig(:current, :temp)
weather.dig(:current)
weather
c
weather.keys
weather
c
JSON.parse(weather[:weather])
weather[:weather].class
weather[:weather]
weather[:cache_hit]
weather.keys
weather.class
weather
c
geocoder_result.display_name
geocoder_result.place_id
c
geocoder_result.display_name  
geocoder_result.place_id
c
geocoder_result.display_name
geocoder_result.place_id
geocoder_result
c
geocoder_result.place_id
geocoder_result
geocoder_Result
c
LocationService.find('Sacramento, CA')
c
LocationService.class
LocationService
require 'location_service'
require 'location_services.rb'
require 'location_services'
pp $LOAD_PATH
$LOAD_PATH
c
@weather
@result
@weather_cache_hit
c
day.dig(:weather, 0, :description).humanize
day.dig(:weather, 0, :description)
day.dig(:weather, :description)
day = @weather[:daily][0]
@weather[:daily][0]
c
cc
c
@result[:place_id]
@result
c
@weather
@result
c
result
@result
c
params[:location]
params
c
params
c
@weather[:timezone]
now[:timezone]
now[:time_zone]
now[:dt]
now = @weather.dig(:current)
c
day.dig(:weather, 0, :icon_uri)
day = @weather.dig(:daily).first
c
day.dig(:dt)
day
day =@weather.dig(:daily).first
@weather.dig(:daily).class
@weather.dig(:minutely)
@weather.keys
c
@weather.dig(:current, :wind_speed).to_i
@weather.dig(:current, :humidity).to_i
@weather.dig(:current, :temp).to_i
@weather.dig(:current, :temp)
@weather.dig(:current)
c
@weather.dig(:current, :weather, 0, :icon_uri)
@weather.dig(:current, :weather, 0, :icon_url)
@weather.dig(:current, :weather, 0, :description)
c
@weather.dig(:current, :weather, 0, :description).humanize
@weather.dig(:current, :weather, 0, :description)
@weather.dig(:current, :weather, :description).humanize
@weather.dig(:current, :weather)
@weather.dig(:current, :description)
@weather.dig(:current)
c
parsed_datetime.in_time_zone(desired_time_zone)
desired_time_zone = ActiveSupport::TimeZone["America/Los_Angeles"]
parsed_datetime = DateTime.parse(@weather.dig(:current, :dt))
@weather.dig(:timezone).class
@weather.dig(:timezone)
@weather.dig(:current, :dt)
pp @weather
@weather.dig(:current, :timezone)
@weather.dig(:current, :dt)
@weather[:current]
@weather
c
@result[:display_name]
@result
c
@result['display_name']
@result.display_name
@result
@reusult
c
@result
c
@result['display_name']
result['display_name']
@result.keys
result.keys
result['display_name']
@result
c
data = JSON.parse(params[:data])
result = JSON.parse(params.dig(:data, :weather))
result = JSON.parse(params.dig(:data, :result))
JSON.parse(params.dig(:data, :result))
params.dig(:data, :result).class
params.dig(:data, :result).clas
params.dig(:data, :result).cata
params.dig(:data, :result)
params.dig(:data).class
params.dig(:data)
c
result.city
pp result
pp result.to_json
pp result
result
result.data.city
result = params.dig(:data, :result)
params.dig(:data, :result)
params['result']
params[:result]
params[:data]
c
result
c
results
results.select! { |result| result.country == 'United States' }
results.select { |result| result.country == 'United States' }
results.first { |result| result.country == 'United States' }
results.first { |result| result.country = 'United States' }
results.last.country
results.first.country
results.size
results.first
results = Geocoder.search(location_text, country: 'United States')
location_text
result
c
result
c
cached_dcata.dig(:weather, 'current')
cached_data.dig(:weather, 'current')
cached_data.dig(:weather, :current)
cached_data[:weather]
cached_data[:result]
cached_data[:location]
cached_data
c
result.place_id
 @weather = Globals::WeatherClient.one_call(lat: result.data['lat'], lon: result.data['lon'], exclude: ['minutely', 'hourly'], units: :imperial)
result.data['lon']
result.data['lat']
result.data.lat
result.data
result.lat
result.place_id
result = results.first
results.first
results.size
results = Geocoder.search(location_text)
continue
results = ::Geocoder.search(location_text)
results = Geocoder.search(location_text)
location_text
c
@current_weather["name"]
c
@current_weather.dig('weather', 0, 'main')
@current_weather.dig("clouds")
@current_weather
c
pp @one_call
@one_call = JSON.parse(@one_call)
@one_call
c
@current_weather
pp JSON.parse(@forecast)
@forecast.class
c
params["current_forecast"]
pp JSON.parse(str)
JSON.parse(str)
str =@forecast.to_json
puts @forecast.to_json
pp @forecast.to_json
pp @forecast
JSON.pretty_print(JSON.parse(@forecast.to_json))
JSON.pretty_print(@forecast)
@forecast.to_json
@forecast
c
@current_weather
c
@current_weather["name"]
@current_weather.keys
@current_weather.class
@current_weather.name
@current_weather.main
@current_weather
c
pp JSON.parse(params["current_weather"].to_json)
JSON.parse(params["current_weather"].to_json)
params["current_weather"].to_json
params["current_weather"]
params
c
params
c
params
continue
@current_weather
c
JSON.parse(@current_weather.to_json)
JSON.pretty_print(JSON.parse(@current_weather.to_json))
JSON.pretty_print(@current_weather)
@current_weather.to_json
@current_weather
c
forecast = Globals::WeatherClient.one_call(lat: current_weather.coord.lat, lon: current_weather.coord.lon, exclude: ['minutely', 'hourly'], units: :imperial)
current_weather.coord.lon
current_weather.coord.lat
current_weather.coord
current_weather.main
current_weather = Globals::WeatherClient.current_zip('83706')
current_weather.main
current_weather.coord
current_weather.latitude
current_weather.lat
